#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status.

# ==============================================================================
# Generic AWS Infrastructure Deployment Script for Private EC2 + ALB Setup
# ==============================================================================
# This script automates the creation of foundational AWS infrastructure
# required for deploying an application on a private EC2 instance,
# accessible via an Application Load Balancer.
#
# It creates:
# - Two public subnets
# - One private subnet
# - Internet Gateway (if not already attached to the specified VPC)
# - NAT Gateway (in a public subnet)
# - Public and Private Route Tables
# - Security Groups (for ALB and EC2)
# - An EC2 instance in the private subnet
# - An Application Load Balancer, Target Group, and Listener
#
# IMPORTANT: This script ASSUMES an existing VPC. It DOES NOT create a new VPC.
# Always review and set the configuration variables before running.
# ==============================================================================

# --- Configuration Variables ---
# AWS Region where resources will be deployed (e.g., "us-east-1", "ap-south-1")
AWS_REGION="ap-south-1"

# The ID of the EXISTING VPC where all resources will be created.
# This script builds *within* a VPC you specify.
VPC_ID_TO_USE="vpc-02cc2a725bffc71f4" # <--- REPLACE WITH YOUR ACTUAL VPC ID!

# EC2 Instance Type (e.g., "t3.small", "t2.micro")
INSTANCE_TYPE="t3.small"

# Name of an existing EC2 Key Pair in your AWS account.
# Used for SSH access to the EC2 instance.
KEY_PAIR_NAME="suiteCRM" # <--- REPLACE WITH YOUR ACTUAL KEY PAIR NAME!

# The application port on the EC2 instance (e.g., 80 for HTTP, 443 for HTTPS)
APP_PORT="80"

# A unique prefix for all resources created by this script.
# CHANGE THIS FOR EACH NEW DEPLOYMENT to avoid naming conflicts.
RESOURCE_NAME_PREFIX="mywebapp-infra" # <--- CHANGE THIS FOR NEW DEPLOYMENTS!

# --- Script Start ---
echo "--- Starting infrastructure deployment in region $AWS_REGION for VPC $VPC_ID_TO_USE ---"
echo "--- Using resource prefix: $RESOURCE_NAME_PREFIX ---"

# Validate VPC ID
if [ -z "$VPC_ID_TO_USE" ]; then
    echo "ERROR: VPC_ID_TO_USE is not set. Please configure it in the script."
    exit 1
fi
aws ec2 describe-vpcs --vpc-ids "$VPC_ID_TO_USE" --query "Vpcs[0].VpcId" --output text > /dev/null || \
    { echo "ERROR: VPC ID '$VPC_ID_TO_USE' is invalid or not found in region '$AWS_REGION'. Please check your configuration."; exit 1; }

# Get Availability Zones
AZ1=$(aws ec2 describe-availability-zones --region "$AWS_REGION" --query "AvailabilityZones[0].ZoneName" --output text)
AZ2=$(aws ec2 describe-availability-zones --region "$AWS_REGION" --query "AvailabilityZones[1].ZoneName" --output text)
echo "Using Availability Zones: $AZ1 and $AZ2"

# --- 1. Networking Setup (Subnets, Gateways, Routes) ---
echo "--- [1/6] Setting up Networking... ---"

# Create Public Subnets (using arbitrary but common CIDR blocks within 172.31.0.0/16 range for example)
PUBLIC_SUBNET_1_CIDR="172.31.60.0/24"
PUBLIC_SUBNET_2_CIDR="172.31.61.0/24"
PRIVATE_SUBNET_CIDR="172.31.62.0/24" # For the EC2 instance

PUBLIC_SUBNET_1_ID=$(aws ec2 create-subnet --vpc-id "$VPC_ID_TO_USE" --cidr-block "$PUBLIC_SUBNET_1_CIDR" --availability-zone "$AZ1" --query "Subnet.SubnetId" --output text)
aws ec2 create-tags --resources "$PUBLIC_SUBNET_1_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-public-subnet-1"
echo "Created Public Subnet 1: $PUBLIC_SUBNET_1_ID in AZ $AZ1 (CIDR: $PUBLIC_SUBNET_1_CIDR)"

PUBLIC_SUBNET_2_ID=$(aws ec2 create-subnet --vpc-id "$VPC_ID_TO_USE" --cidr-block "$PUBLIC_SUBNET_2_CIDR" --availability-zone "$AZ2" --query "Subnet.SubnetId" --output text)
aws ec2 create-tags --resources "$PUBLIC_SUBNET_2_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-public-subnet-2"
echo "Created Public Subnet 2: $PUBLIC_SUBNET_2_ID in AZ $AZ2 (CIDR: $PUBLIC_SUBNET_2_CIDR)"

PRIVATE_SUBNET_ID=$(aws ec2 create-subnet --vpc-id "$VPC_ID_TO_USE" --cidr-block "$PRIVATE_SUBNET_CIDR" --availability-zone "$AZ1" --query "Subnet.SubnetId" --output text)
aws ec2 create-tags --resources "$PRIVATE_SUBNET_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-private-subnet-1"
echo "Created Private Subnet: $PRIVATE_SUBNET_ID in AZ $AZ1 (CIDR: $PRIVATE_SUBNET_CIDR)"

# Find or Create Internet Gateway (IGW) for the VPC
IGW_ID=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID_TO_USE" --query "InternetGateways[0].InternetGatewayId" --output text)
if [ -z "$IGW_ID" ]; then
    echo "No Internet Gateway found for VPC $VPC_ID_TO_USE. Creating one..."
    IGW_ID=$(aws ec2 create-internet-gateway --query "InternetGateway.InternetGatewayId" --output text)
    aws ec2 attach-internet-gateway --internet-gateway-id "$IGW_ID" --vpc-id "$VPC_ID_TO_USE"
    aws ec2 create-tags --resources "$IGW_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-igw"
    echo "Created and Attached Internet Gateway: $IGW_ID"
else
    echo "Found existing Internet Gateway: $IGW_ID"
fi

# Create Public Route Table and associate with public subnets
PUBLIC_ROUTE_TABLE_ID=$(aws ec2 create-route-table --vpc-id "$VPC_ID_TO_USE" --query "RouteTable.RouteTableId" --output text)
aws ec2 create-tags --resources "$PUBLIC_ROUTE_TABLE_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-public-rtb"
aws ec2 create-route --route-table-id "$PUBLIC_ROUTE_TABLE_ID" --destination-cidr-block 0.0.0.0/0 --gateway-id "$IGW_ID"
aws ec2 associate-route-table --subnet-id "$PUBLIC_SUBNET_1_ID" --route-table-id "$PUBLIC_ROUTE_TABLE_ID"
aws ec2 associate-route-table --subnet-id "$PUBLIC_SUBNET_2_ID" --route-table-id "$PUBLIC_ROUTE_TABLE_ID"
echo "Created Public Route Table and associated with public subnets."

# Create NAT Gateway
EIP_ALLOC_ID=$(aws ec2 allocate-address --domain vpc --query "AllocationId" --output text)
aws ec2 create-tags --resources "$EIP_ALLOC_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-nat-eip"
NAT_GW_ID=$(aws ec2 create-nat-gateway --subnet-id "$PUBLIC_SUBNET_1_ID" --allocation-id "$EIP_ALLOC_ID" --query "NatGateway.NatGatewayId" --output text)
aws ec2 create-tags --resources "$NAT_GW_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-nat-gw"
echo "Creating NAT Gateway: $NAT_GW_ID. This will take a few minutes..."
aws ec2 wait nat-gateway-available --nat-gateway-ids "$NAT_GW_ID"
echo "NAT Gateway is now available."

# Create Private Route Table and associate with private subnet
PRIVATE_ROUTE_TABLE_ID=$(aws ec2 create-route-table --vpc-id "$VPC_ID_TO_USE" --query "RouteTable.RouteTableId" --output text)
aws ec2 create-tags --resources "$PRIVATE_ROUTE_TABLE_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-private-rtb"
aws ec2 create-route --route-table-id "$PRIVATE_ROUTE_TABLE_ID" --destination-cidr-block 0.0.0.0/0 --nat-gateway-id "$NAT_GW_ID"
aws ec2 associate-route-table --subnet-id "$PRIVATE_SUBNET_ID" --route-table-id "$PRIVATE_ROUTE_TABLE_ID"
echo "Created Private Route Table and associated with private subnet."
echo "--- [1/6] Networking setup complete. ---"

# --- 2. Security Group Setup ---
echo "--- [2/6] Setting up Security Groups... ---"
ALB_SG_ID=$(aws ec2 create-security-group --group-name "${RESOURCE_NAME_PREFIX}-alb-sg" --description "Security Group for ALB" --vpc-id "$VPC_ID_TO_USE" --query "GroupId" --output text)
aws ec2 authorize-security-group-ingress --group-id "$ALB_SG_ID" --protocol tcp --port 80 --cidr 0.0.0.0/0
aws ec2 authorize-security-group-ingress --group-id "$ALB_SG_ID" --protocol tcp --port 443 --cidr 0.0.0.0/0 # Optional: for HTTPS
aws ec2 create-tags --resources "$ALB_SG_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-alb-sg"
echo "Created ALB Security Group: $ALB_SG_ID"

EC2_SG_ID=$(aws ec2 create-security-group --group-name "${RESOURCE_NAME_PREFIX}-ec2-sg" --description "Security Group for EC2 instances" --vpc-id "$VPC_ID_TO_USE" --query "GroupId" --output text)
aws ec2 authorize-security-group-ingress --group-id "$EC2_SG_ID" --protocol tcp --port "$APP_PORT" --source-group "$ALB_SG_ID"
aws ec2 authorize-security-group-ingress --group-id "$EC2_SG_ID" --protocol tcp --port 22 --cidr 0.0.0.0/0 # Allows SSH from anywhere - tighten in production!
aws ec2 create-tags --resources "$EC2_SG_ID" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-ec2-sg"
echo "Created EC2 Security Group: $EC2_SG_ID"
echo "--- [2/6] Security Groups setup complete. ---"

# --- 3. EC2 Instance Launch ---
echo "--- [3/6] Launching EC2 Instance in private subnet... ---"

# Dynamic AMI Lookup for latest Ubuntu 24.04 LTS (Noble Numbat)
AMI_OWNER="099720109477" # Canonical's AWS account ID
AMI_NAME_PATTERN="ubuntu/images/hvm-ssd/ubuntu-noble-24.04-amd64-server-*" # Noble = 24.04
AMI_ID=$(aws ec2 describe-images \
    --owners "$AMI_OWNER" \
    --filters "Name=name,Values=$AMI_NAME_PATTERN" "Name=state,Values=available" \
    --query "sort_by(Images, &CreationDate)[-1].ImageId" --output text)

if [ -z "$AMI_ID" ]; then
    echo "ERROR: Could not find a suitable AMI for Ubuntu 24.04 LTS (Noble Numbat). Please check AMI availability."
    exit 1
fi
echo "Found latest Ubuntu 24.04 LTS AMI: $AMI_ID"

# User data script for initial EC2 setup (Apache and placeholder page)
USER_DATA=$(cat <<'EOF'
#!/bin/bash
apt update -y
apt install -y apache2
systemctl start apache2
systemctl enable apache2
echo "<h1>Hello from Private EC2 Instance!</h1>" > /var/www/html/index.html
EOF
)

INSTANCE_ID=$(aws ec2 run-instances \
    --image-id "$AMI_ID" \
    --instance-type "$INSTANCE_TYPE" \
    --key-name "$KEY_PAIR_NAME" \
    --subnet-id "$PRIVATE_SUBNET_ID" \
    --security-group-ids "$EC2_SG_ID" \
    --user-data "$USER_DATA" \
    --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=${RESOURCE_NAME_PREFIX}-instance}]" \
    --query "Instances[0].InstanceId" \
    --output text)

echo "Launched instance: $INSTANCE_ID. Waiting for it to be in 'running' state..."
aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
echo "Instance $INSTANCE_ID is now running."
echo "--- [3/6] EC2 Instance launch complete. ---"

# --- 4. Application Load Balancer Setup ---
echo "--- [4/6] Setting up Application Load Balancer... ---"
ALB_ARN=$(aws elbv2 create-load-balancer \
    --name "${RESOURCE_NAME_PREFIX}-alb" \
    --type application \
    --subnets "$PUBLIC_SUBNET_1_ID" "$PUBLIC_SUBNET_2_ID" \
    --security-groups "$ALB_SG_ID" \
    --query "LoadBalancers[0].LoadBalancerArn" \
    --output text)
aws elbv2 create-tags --resource-arns "$ALB_ARN" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-alb"
echo "Created Application Load Balancer: $ALB_ARN"
echo "--- [4/6] ALB setup complete. ---"

# --- 5. Target Group Setup ---
echo "--- [5/6] Setting up Target Group... ---"
TG_ARN=$(aws elbv2 create-target-group \
    --name "${RESOURCE_NAME_PREFIX}-tg" \
    --protocol HTTP \
    --port "$APP_PORT" \
    --vpc-id "$VPC_ID_TO_USE" \
    --health-check-protocol HTTP \
    --health-check-path / \
    --target-type instance \
    --query "TargetGroups[0].TargetGroupArn" --output text)
aws elbv2 create-tags --resource-arns "$TG_ARN" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-tg"
echo "Created Target Group: $TG_ARN"

echo "Registering instance $INSTANCE_ID with the target group..."
aws elbv2 register-targets --target-group-arn "$TG_ARN" --targets Id="$INSTANCE_ID"
echo "Instance $INSTANCE_ID registered with the target group."
echo "--- [5/6] Target Group setup complete. ---"

# --- 6. Listener Setup ---
echo "--- [6/6] Setting up ALB Listener... ---"
LISTENER_ARN=$(aws elbv2 create-listener \
    --load-balancer-arn "$ALB_ARN" \
    --protocol HTTP \
    --port 80 \
    --default-actions Type=forward,TargetGroupArn="$TG_ARN" \
    --query "Listeners[0].ListenerArn" \
    --output text)
aws elbv2 create-tags --resource-arns "$LISTENER_ARN" --tags Key=Name,Value="${RESOURCE_NAME_PREFIX}-http-listener"
echo "Created HTTP Listener on port 80: $LISTENER_ARN"
echo "--- [6/6] ALB Listener setup complete. ---"

# --- Final Output ---
ALB_DNS_NAME_FINAL=$(aws elbv2 describe-load-balancers --load-balancer-arns "$ALB_ARN" --query "LoadBalancers[0].DNSName" --output text)

echo ""
echo "=============================================================================="
echo " SUCCESS! AWS Infrastructure deployment is complete."
echo "=============================================================================="
echo ""
echo "Resources created with prefix: $RESOURCE_NAME_PREFIX"
echo "VPC ID: $VPC_ID_TO_USE"
echo "Public Subnet 1: $PUBLIC_SUBNET_1_ID"
echo "Public Subnet 2: $PUBLIC_SUBNET_2_ID"
echo "Private Subnet: $PRIVATE_SUBNET_ID"
echo "EC2 Instance ID: $INSTANCE_ID"
echo "ALB DNS Name: http://$ALB_DNS_NAME_FINAL"
echo ""
echo "NEXT STEPS:"
echo "1. Verify you can access 'http://$ALB_DNS_NAME_FINAL' in your browser and see 'Hello from Private EC2 Instance!'"
echo "2. SSH into your EC2 instance (ID: $INSTANCE_ID) using your Key Pair '$KEY_PAIR_NAME'."
echo "3. Run the SuiteCRM software deployment script (e.g., 'deploy_suitecrm.sh') on the EC2 instance."
echo ""
echo "Note: It may take a minute or two for the ALB health checks to pass."
echo "=============================================================================="
